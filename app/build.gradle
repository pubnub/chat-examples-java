apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

import java.util.Map;

check.dependsOn('checkstyle')

def snippetsPath = "snippets"
def examplesPath = "examples"
def integrationTestsPath = "integrationtests"

// tag::KEYS-1[]
android {
    compileSdkVersion 28
    defaultConfig {
        // tag::ignore[]
        applicationId "com.pubnub.crc.android"
        // end::ignore[]
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // tag::ignore[]
        vectorDrawables.useSupportLibrary = true
        // end::ignore[]
        buildConfigField "String", "PUB_KEY", PUB_KEY
        buildConfigField "String", "SUB_KEY", SUB_KEY
    }
// end::KEYS-1[]
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    lintOptions {
        textReport = true
        disable 'OldTargetApi', 'UnusedAttribute', 'GradleDependency', 'UnusedResources', 'ContentDescription'
    }
    sourceSets {
        main {
            manifest.srcFile "$examplesPath/AndroidManifest.xml"
            java.srcDirs = ["$examplesPath"]
            res.srcDirs = ["$examplesPath/res"]
        }
        test {
            java {
                srcDirs = ["$snippetsPath"]
                if (System.getenv().get("CI") == null) {
                    exclude "**/PushNotificationTest*"
                }
            }
        }
        androidTest {
            java.srcDirs = ["$integrationTestsPath"]
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def project = "ChatExamples"
            def SEP = "_"
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def date = new Date()
            def formattedDate = date.format("ddMMyyyyHHmm")
            def newApkName = project + SEP + buildType + SEP + versionName + SEP + "rev" + versionCode + SEP + formattedDate + ".apk"
            outputFileName = newApkName
        }
    }
}

checkstyle {
    toolVersion = '8.14'
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

task checkstyle(type: Checkstyle) {
    source "$snippetsPath", "$integrationTestsPath"
    include '**/*.java'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    classpath = files()
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'

    // tag::DEP-1[]
    implementation 'com.pubnub:pubnub-gson:4.23.0'
    // end::DEP-1[]

    implementation 'com.google.code.gson:gson:2.8.1'

    api 'com.google.guava:guava:27.1-android'

    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.awaitility:awaitility:3.1.5'

    // Core library
    androidTestImplementation 'androidx.test:core:1.1.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'org.awaitility:awaitility:3.1.5'
}
